(ns machine.analyse-management.wrb-analysis.vtr
  (:require [machine.quotes.series :refer :all]
            [machine.analyse-management.wrb-analysis.utils :refer :all])
  (:import [machine.quotes.core Quotes]))


(defprotocol Volatility-Trading-Report
  (volatility-trading-report [data zone-types] [data zone-types i])
  (volatility-trading-report-h2 [data zone-types] [data zone-types i]))

(extend-type Quotes
  Volatility-Trading-Report
  (volatility-trading-report ^Quotes
  ([^Quotes {^doubles main-open#          :open#
             ^doubles main-high#          :high#
             ^doubles main-low#           :low#
             ^doubles main-close#         :close#
             ^longs main-direction#       :candle-direction#
             ^doubles main-body-size#     :candle-body-size#
             ^doubles main-body-midpoint# :candle-body-midpoint#
             ^longs main-broken-range#    :candle-broken-range#
             ^longs main-filled-by#       :candle-filled-by#
             ^longs main-wrb#             :wrb-body#
             ^longs main-wrb-hg#          :wrb-hg-body#
             :as                          main-data}
    ^Quotes {^doubles sister-open#      :open#
             ^doubles sister-high#      :high#
             ^doubles sister-low#       :low#
             ^doubles sister-close#     :close#
             ^longs sister-direction#   :candle-direction#
             ^doubles sister-body-size# :candle-body-size#
             ^longs sister-filled-by#   :candle-filled-by#
             ^longs sister-wrb-hg#      :wrb-hg-body#
             :as                        sister-data}
    zone-types]
   (let [main-name (:instrument main-data)
         sister-name (:instrument sister-data)
         main-size (alength ^doubles (:open# main-data))
         sister-size (alength ^doubles (:open# sister-data))
         loop-limit (Math/min main-size sister-size)
         ^doubles correlation# (get main-data (keyword (str "correlation-" (name sister-name) "#")))
         ^longs main-zone# (identity-union (mapv #(get main-data (zone-keyword %)) zone-types))
         ^longs main-zone-confirmation-candle# (identity-union (mapv #(get main-data (confirmation-candle-keyword %)) zone-types))
         ^objects main-zone-type# (object-union (mapv #(get main-data (type-keyword %)) zone-types))
         ^longs sister-zone# (identity-union (mapv #(get sister-data (zone-keyword %)) zone-types))
         ^longs sister-zone-confirmation-candle# (identity-union (mapv #(get sister-data (confirmation-candle-keyword %)) zone-types))
         ^objects sister-zone-type# (object-union (mapv #(get sister-data (type-keyword %)) zone-types))
         ^longs main-vtr# (or (:vtr# main-data) (long-array main-size))
         ^longs main-vtr-zone-nr# (or (:vtr-zone-nr# main-data) (long-array main-size))
         ^objects main-vtr-sister-name# (or (:vtr-sister-name# main-data) (object-array main-size))
         ^longs zone-used-by# (long-array main-size)]
     (loop [i (- loop-limit 2)]
       (when (>= i 0)
         (cond
           ;bull not inverted vtr
           (and (>= (aget correlation# i) 0.9)
                (== -1 (aget main-wrb# (inc i)))
                ;(== -1 (aget main-direction# (inc i)))
                (>= (aget main-close# i) (aget main-body-midpoint# (inc i)))
                ;(>= (aget main-broken-range# (inc i)) 3)
                (== 1 (aget main-direction# i))
                (== 1 (aget sister-direction# i)))
           (loop [j 3]
             (when (and (< j (- loop-limit i)) (<= j 64))
               (if (and (zero? (aget zone-used-by# (+ i j)))
                        (or (and (== 1 (aget main-zone# (+ i j)))
                                 (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                 (== 1 (aget sister-wrb-hg# (+ i j)))
                                 (> (aget main-body-size# (+ i j))
                                    (aget main-body-size# (inc i)))
                                 (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget main-filled-by# (+ i j)) (inc i)))
                            (and (== 1 (aget main-wrb-hg# (+ i j)))
                                 (== 1 (aget sister-zone# (+ i j)))
                                 (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                 (> (aget sister-body-size# (+ i j))
                                    (aget sister-body-size# (inc i)))
                                 (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget sister-filled-by# (+ i j)) (inc i))))
                        (or (and (> (aget main-close# (inc i))
                                    (aget main-close# (+ i j)))
                                 (> (amin (aslice main-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (<= (aget sister-close# (inc i))
                                     (aget sister-close# (+ i j))))
                            (and (> (aget main-close# (+ i j))
                                    (aget main-close# (inc i))
                                    (aget main-open# (+ i j)))
                                 (> (amin (aslice main-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (or (< (aget sister-close# (inc i))
                                        (aget sister-open# (+ i j)))
                                     (> (aget sister-close# (inc i))
                                        (aget sister-close# (+ i j)))))
                            (and (> (aget sister-close# (inc i))
                                    (aget sister-close# (+ i j)))
                                 (> (amin (aslice sister-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (<= (aget main-close# (inc i))
                                     (aget main-close# (+ i j))))
                            (and (> (aget sister-close# (+ i j))
                                    (aget sister-close# (inc i))
                                    (aget sister-open# (+ i j)))
                                 (> (amin (aslice sister-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (or (< (aget main-close# (inc i))
                                        (aget main-open# (+ i j)))
                                     (> (aget main-close# (inc i))
                                        (aget main-close# (+ i j)))))))
                 (do (aset main-vtr# i (inc (aget main-vtr# i)))
                     (aset main-vtr-zone-nr# i (+ i j))
                     (aset zone-used-by# (+ i j) i)
                     (aset main-vtr-sister-name# i sister-name)))
               (recur (inc j))))
           ;bear not inverted vtr
           (and (>= (aget correlation# i) 0.9)
                (== 1 (aget main-wrb# (inc i)))
                ;(== 1 (aget main-direction# (inc i)))
                (<= (aget main-close# i) (aget main-body-midpoint# (inc i)))
                ;(>= (aget main-broken-range# (inc i)) 3)
                (== -1 (aget main-direction# i))
                (== -1 (aget sister-direction# i)))
           (loop [j 3]
             (when (and (< j (- loop-limit i)) (<= j 64))
               (if (and (zero? (aget zone-used-by# (+ i j)))
                        (or (and (== -1 (aget main-zone# (+ i j)))
                                 (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                 (== -1 (aget sister-wrb-hg# (+ i j)))
                                 (> (aget main-body-size# (+ i j))
                                    (aget main-body-size# (inc i)))
                                 (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget main-filled-by# (+ i j)) (inc i)))
                            (and (== -1 (aget main-wrb-hg# (+ i j)))
                                 (== -1 (aget sister-zone# (+ i j)))
                                 (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                 (> (aget sister-body-size# (+ i j))
                                    (aget sister-body-size# (inc i)))
                                 (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget sister-filled-by# (+ i j)) (inc i))))
                        (or (and (< (aget main-close# (inc i))
                                    (aget main-close# (+ i j)))
                                 (< (amax (aslice main-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (>= (aget sister-close# (inc i))
                                     (aget sister-close# (+ i j))))
                            (and (< (aget main-close# (+ i j))
                                    (aget main-close# (inc i))
                                    (aget main-open# (+ i j)))
                                 (< (amax (aslice main-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (or (> (aget sister-close# (inc i))
                                        (aget sister-open# (+ i j)))
                                     (< (aget sister-close# (inc i))
                                        (aget sister-close# (+ i j)))))
                            (and (< (aget sister-close# (inc i))
                                    (aget sister-close# (+ i j)))
                                 (< (amax (aslice sister-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (>= (aget main-close# (inc i))
                                     (aget main-close# (+ i j))))
                            (and (< (aget sister-close# (+ i j))
                                    (aget sister-close# (inc i))
                                    (aget sister-open# (+ i j)))
                                 (< (amax (aslice sister-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (or (> (aget main-close# (inc i))
                                        (aget main-open# (+ i j)))
                                     (< (aget main-close# (inc i))
                                        (aget main-close# (+ i j)))))))
                 (do (aset main-vtr# i (dec (aget main-vtr# i)))
                     (aset main-vtr-zone-nr# i (+ i j))
                     (aset zone-used-by# (+ i j) i)
                     (aset main-vtr-sister-name# i sister-name)))
               (recur (inc j))))
           ;bull inverted vtr
           (and (<= (aget correlation# i) -0.9)
                (== -1 (aget main-wrb# (inc i)))
                ;(== -1 (aget main-direction# (inc i)))
                (>= (aget main-close# i) (aget main-body-midpoint# (inc i)))
                ;(>= (aget main-broken-range# (inc i)) 3)
                (== 1 (aget main-direction# i))
                (== -1 (aget sister-direction# i)))
           (loop [j 3]
             (when (and (< j (- loop-limit i)) (<= j 64))
               (if (and (zero? (aget zone-used-by# (+ i j)))
                        (or (and (== 1 (aget main-zone# (+ i j)))
                                 (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                 (== -1 (aget sister-wrb-hg# (+ i j)))
                                 (> (aget main-body-size# (+ i j))
                                    (aget main-body-size# (inc i)))
                                 (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget main-filled-by# (+ i j)) (inc i)))
                            (and (== 1 (aget main-wrb-hg# (+ i j)))
                                 (== -1 (aget sister-zone# (+ i j)))
                                 (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                 (> (aget sister-body-size# (+ i j))
                                    (aget sister-body-size# (inc i)))
                                 (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget sister-filled-by# (+ i j)) (inc i))))
                        (or (and (> (aget main-close# (inc i))
                                    (aget main-close# (+ i j)))
                                 (> (amin (aslice main-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (>= (aget sister-close# (inc i))
                                     (aget sister-close# (+ i j))))
                            (and (> (aget main-close# (+ i j))
                                    (aget main-close# (inc i))
                                    (aget main-open# (+ i j)))
                                 (> (amin (aslice main-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (or (> (aget sister-close# (inc i))
                                        (aget sister-open# (+ i j)))
                                     (< (aget sister-close# (inc i))
                                        (aget sister-close# (+ i j)))))
                            (and (< (aget sister-close# (inc i))
                                    (aget sister-close# (+ i j)))
                                 (< (amax (aslice sister-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (<= (aget main-close# (inc i))
                                     (aget main-close# (+ i j))))
                            (and (< (aget sister-close# (+ i j))
                                    (aget sister-close# (inc i))
                                    (aget sister-open# (+ i j)))
                                 (< (amax (aslice sister-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (or (< (aget main-close# (inc i))
                                        (aget main-open# (+ i j)))
                                     (> (aget main-close# (inc i))
                                        (aget main-close# (+ i j)))))))
                 (do (aset main-vtr# i (inc (aget main-vtr# i)))
                     (aset main-vtr-zone-nr# i (+ i j))
                     (aset zone-used-by# (+ i j) i)
                     (aset main-vtr-sister-name# i sister-name)))
               (recur (inc j))))
           ;bear inverted vtr
           (and (<= (aget correlation# i) -0.9)
                (== 1 (aget main-wrb# (inc i)))
                ;(== 1 (aget main-direction# (inc i)))
                (<= (aget main-close# i) (aget main-body-midpoint# (inc i)))
                ;(>= (aget main-broken-range# (inc i)) 3)
                (== -1 (aget main-direction# i))
                (== 1 (aget sister-direction# i)))
           (loop [j 3]
             (when (and (< j (- loop-limit i)) (<= j 64))
               (if (and (zero? (aget zone-used-by# (+ i j)))
                        (or (and (== -1 (aget main-zone# (+ i j)))
                                 (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                 (== 1 (aget sister-wrb-hg# (+ i j)))
                                 (> (aget main-body-size# (+ i j))
                                    (aget main-body-size# (inc i)))
                                 (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget main-filled-by# (+ i j)) (inc i)))
                            (and (== -1 (aget main-wrb-hg# (+ i j)))
                                 (== 1 (aget sister-zone# (+ i j)))
                                 (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                     (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                 (> (aget sister-body-size# (+ i j))
                                    (aget sister-body-size# (inc i)))
                                 (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                 (<= (aget sister-filled-by# (+ i j)) (inc i))))
                        (or (and (< (aget main-close# (inc i))
                                    (aget main-close# (+ i j)))
                                 (< (amax (aslice main-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (<= (aget sister-close# (inc i))
                                     (aget sister-close# (+ i j))))
                            (and (< (aget main-close# (+ i j))
                                    (aget main-close# (inc i))
                                    (aget main-open# (+ i j)))
                                 (< (amax (aslice main-high# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget main-close# (+ i j)))
                                 (or (< (aget sister-close# (inc i))
                                        (aget sister-open# (+ i j)))
                                     (> (aget sister-close# (inc i))
                                        (aget sister-close# (+ i j)))))
                            (and (> (aget sister-close# (inc i))
                                    (aget sister-close# (+ i j)))
                                 (> (amin (aslice sister-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (>= (aget main-close# (inc i))
                                     (aget main-close# (+ i j))))
                            (and (> (aget sister-close# (+ i j))
                                    (aget sister-close# (inc i))
                                    (aget sister-open# (+ i j)))
                                 (> (amin (aslice sister-low# (+ (inc i) 1) (+ (inc i) 4)))
                                    (aget sister-close# (+ i j)))
                                 (or (> (aget main-close# (inc i))
                                        (aget main-open# (+ i j)))
                                     (< (aget main-close# (inc i))
                                        (aget main-close# (+ i j)))))))
                 (do (aset main-vtr# i (dec (aget main-vtr# i)))
                     (aset main-vtr-zone-nr# i (+ i j))
                     (aset zone-used-by# (+ i j) i)
                     (aset main-vtr-sister-name# i sister-name)))
               (recur (inc j)))))
         (recur (dec i))))
     (assoc main-data :vtr# main-vtr#
                      :vtr-zone-nr# main-vtr-zone-nr#
                      :vtr-sister-name# main-vtr-sister-name#))))

  (volatility-trading-report-h2 ^Quotes
  [^Quotes {^doubles main-open#                     :open#
            ^doubles main-high#                     :high#
            ^doubles main-low#                      :low#
            ^doubles main-close#                    :close#
            ^longs main-direction#                  :candle-direction#
            ^doubles main-body-size#                :candle-body-size#
            ^doubles main-body-midpoint#            :candle-body-midpoint#
            ^longs main-broken-range#               :candle-broken-range#
            ^longs main-filled-by#                  :candle-filled-by#
            ^longs main-wrb#                        :wrb-body#
            ^longs main-wrb-hg#                     :wrb-hg-body#
            ^longs main-confirmation-h2#             :confirmation-h2#
            ^longs main-confirmation-h2-contraction# :confirmation-h2-contraction#
            :as                                     main-data}
   ^Quotes {^doubles sister-open#                     :open#
            ^doubles sister-high#                     :high#
            ^doubles sister-low#                      :low#
            ^doubles sister-close#                    :close#
            ^longs sister-direction#                  :candle-direction#
            ^doubles sister-body-size#                :candle-body-size#
            ^longs sister-filled-by#                  :candle-filled-by#
            ^longs sister-wrb-hg#                     :wrb-hg-body#
            ^longs sister-confirmation-h2#             :confirmation-h2#
            ^longs sister-confirmation-h2-contraction :confirmation-h2-contraction#
            :as                                       sister-data}
   zone-types]
    (let [main-name (:instrument main-data)
          sister-name (:instrument sister-data)
          main-size (alength ^doubles (:open# main-data))
          sister-size (alength ^doubles (:open# sister-data))
          loop-limit (Math/min main-size sister-size)
          ^doubles correlation# (get main-data (keyword (str "correlation-" (name sister-name) "#")))
          ^longs main-zone# (identity-union (mapv #(get main-data (zone-keyword %)) zone-types))
          ^longs main-zone-confirmation-candle# (identity-union (mapv #(get main-data (confirmation-candle-keyword %)) zone-types))
          ^objects main-zone-type# (object-union (mapv #(get main-data (type-keyword %)) zone-types))
          ^longs sister-zone# (identity-union (mapv #(get sister-data (zone-keyword %)) zone-types))
          ^longs sister-zone-confirmation-candle# (identity-union (mapv #(get sister-data (confirmation-candle-keyword %)) zone-types))
          ^objects sister-zone-type# (object-union (mapv #(get sister-data (type-keyword %)) zone-types))
          ^longs main-vtr# (or (:vtr-h2# main-data) (long-array main-size))
          ^longs main-vtr-zone-nr# (or (:vtr-h2-zone-nr# main-data) (long-array main-size))
          ^objects main-vtr-sister-name# (or (:vtr-h2-sister-name# main-data) (object-array main-size))
          ^longs zone-used-by# (long-array main-size)]
      (println zone-types)
      (loop [i (- loop-limit 2)]
        (when (>= i 0)
          (let [c2 (+ i (Math/max (aget main-confirmation-h2-contraction# i)
                                       (aget sister-confirmation-h2-contraction i)))]
            (cond
              ;bull not inverted vtr
              (and (>= (aget correlation# i) 0.9)
                   (== 1 (aget main-confirmation-h2# i))
                   (== 1 (aget sister-direction# i)))
              (loop [j 3]
                (when (and (< j (- loop-limit i)) (<= j 64))
                  (if (and (zero? (aget zone-used-by# (+ i j)))
                           (or (and (== 1 (aget main-zone# (+ i j)))
                                    (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                    (== 1 (aget sister-wrb-hg# (+ i j)))
                                    (> (aget main-body-size# (+ i j))
                                       (aget main-body-size# i))
                                    (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget main-filled-by# (+ i j)) c2))
                               (and (== 1 (aget main-wrb-hg# (+ i j)))
                                    (== 1 (aget sister-zone# (+ i j)))
                                    (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                    (> (aget sister-body-size# (+ i j))
                                       (aget sister-body-size# c2))
                                    (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget sister-filled-by# (+ i j)) c2)))
                           (or (and (> (aget main-close# c2)
                                       (aget main-close# (+ i j)))
                                    (> (amin (aslice main-low# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (<= (aget sister-close# c2)
                                        (aget sister-close# (+ i j))))
                               (and (> (aget main-close# (+ i j))
                                       (aget main-close# c2)
                                       (aget main-open# (+ i j)))
                                    (> (amin (aslice main-low# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (or (< (aget sister-close# c2)
                                           (aget sister-open# (+ i j)))
                                        (> (aget sister-close# c2)
                                           (aget sister-close# (+ i j)))))
                               (and (> (aget sister-close# c2)
                                       (aget sister-close# (+ i j)))
                                    (> (amin (aslice sister-low# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (<= (aget main-close# c2)
                                        (aget main-close# (+ i j))))
                               (and (> (aget sister-close# (+ i j))
                                       (aget sister-close# c2)
                                       (aget sister-open# (+ i j)))
                                    (> (amin (aslice sister-low# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (or (< (aget main-close# c2)
                                           (aget main-open# (+ i j)))
                                        (> (aget main-close# c2)
                                           (aget main-close# (+ i j)))))))
                    (do (aset main-vtr# i (inc (aget main-vtr# i)))
                        (aset main-vtr-zone-nr# i (+ i j))
                        (aset zone-used-by# (+ i j) i)
                        (aset main-vtr-sister-name# i sister-name)))
                  (recur (inc j))))
              ;bear not inverted vtr
              (and (>= (aget correlation# i) 0.9)
                   (== -1 (aget main-confirmation-h2# i))
                   (== -1 (aget sister-direction# i)))
              (loop [j 3]
                (when (and (< j (- loop-limit i)) (<= j 64))
                  (if (and (zero? (aget zone-used-by# (+ i j)))
                           (or (and (== -1 (aget main-zone# (+ i j)))
                                    (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                    (== -1 (aget sister-wrb-hg# (+ i j)))
                                    (> (aget main-body-size# (+ i j))
                                       (aget main-body-size# i))
                                    (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget main-filled-by# (+ i j)) c2))
                               (and (== -1 (aget main-wrb-hg# (+ i j)))
                                    (== -1 (aget sister-zone# (+ i j)))
                                    (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                    (> (aget sister-body-size# (+ i j))
                                       (aget sister-body-size# c2))
                                    (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget sister-filled-by# (+ i j)) c2)))
                           (or (and (< (aget main-close# c2)
                                       (aget main-close# (+ i j)))
                                    (< (amax (aslice main-high# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (>= (aget sister-close# c2)
                                        (aget sister-close# (+ i j))))
                               (and (< (aget main-close# (+ i j))
                                       (aget main-close# c2)
                                       (aget main-open# (+ i j)))
                                    (< (amax (aslice main-high# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (or (> (aget sister-close# c2)
                                           (aget sister-open# (+ i j)))
                                        (< (aget sister-close# c2)
                                           (aget sister-close# (+ i j)))))
                               (and (< (aget sister-close# c2)
                                       (aget sister-close# (+ i j)))
                                    (< (amax (aslice sister-high# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (>= (aget main-close# c2)
                                        (aget main-close# (+ i j))))
                               (and (< (aget sister-close# (+ i j))
                                       (aget sister-close# c2)
                                       (aget sister-open# (+ i j)))
                                    (< (amax (aslice sister-high# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (or (> (aget main-close# c2)
                                           (aget main-open# (+ i j)))
                                        (< (aget main-close# c2)
                                           (aget main-close# (+ i j)))))))
                    (do (aset main-vtr# i (dec (aget main-vtr# i)))
                        (aset main-vtr-zone-nr# i (+ i j))
                        (aset zone-used-by# (+ i j) i)
                        (aset main-vtr-sister-name# i sister-name)))
                  (recur (inc j))))
              ;bull inverted vtr
              (and (<= (aget correlation# i) -0.9)
                   (== 1 (aget main-confirmation-h2# i))
                   (== -1 (aget sister-direction# i)))
              (loop [j 3]
                (when (and (< j (- loop-limit i)) (<= j 64))
                  (if (and (zero? (aget zone-used-by# (+ i j)))
                           (or (and (== 1 (aget main-zone# (+ i j)))
                                    (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                    (== -1 (aget sister-wrb-hg# (+ i j)))
                                    (> (aget main-body-size# (+ i j))
                                       (aget main-body-size# i))
                                    (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget main-filled-by# (+ i j)) c2))
                               (and (== 1 (aget main-wrb-hg# (+ i j)))
                                    (== -1 (aget sister-zone# (+ i j)))
                                    (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                    (> (aget sister-body-size# (+ i j))
                                       (aget sister-body-size# c2))
                                    (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget sister-filled-by# (+ i j)) c2)))
                           (or (and (> (aget main-close# c2)
                                       (aget main-close# (+ i j)))
                                    (> (amin (aslice main-low# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (>= (aget sister-close# c2)
                                        (aget sister-close# (+ i j))))
                               (and (> (aget main-close# (+ i j))
                                       (aget main-close# c2)
                                       (aget main-open# (+ i j)))
                                    (> (amin (aslice main-low# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (or (> (aget sister-close# c2)
                                           (aget sister-open# (+ i j)))
                                        (< (aget sister-close# c2)
                                           (aget sister-close# (+ i j)))))
                               (and (< (aget sister-close# c2)
                                       (aget sister-close# (+ i j)))
                                    (< (amax (aslice sister-high# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (<= (aget main-close# c2)
                                        (aget main-close# (+ i j))))
                               (and (< (aget sister-close# (+ i j))
                                       (aget sister-close# c2)
                                       (aget sister-open# (+ i j)))
                                    (< (amax (aslice sister-high# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (or (< (aget main-close# c2)
                                           (aget main-open# (+ i j)))
                                        (> (aget main-close# c2)
                                           (aget main-close# (+ i j)))))))
                    (do (aset main-vtr# i (inc (aget main-vtr# i)))
                        (aset main-vtr-zone-nr# i (+ i j))
                        (aset zone-used-by# (+ i j) i)
                        (aset main-vtr-sister-name# i sister-name)))
                  (recur (inc j))))
              ;bear inverted vtr
              (and (<= (aget correlation# i) -0.9)
                   (== -1 (aget main-confirmation-h2# i))
                   (== 1 (aget sister-direction# i)))
              (loop [j 3]
                (when (and (< j (- loop-limit i)) (<= j 64))
                  (if (and (zero? (aget zone-used-by# (+ i j)))
                           (or (and (== -1 (aget main-zone# (+ i j)))
                                    (or (and (= :swing-point (aget main-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget main-zone-type# (+ i j))) (<= j 16)))
                                    (== 1 (aget sister-wrb-hg# (+ i j)))
                                    (> (aget main-body-size# (+ i j))
                                       (aget main-body-size# i))
                                    (>= (aget main-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget main-filled-by# (+ i j)) c2))
                               (and (== -1 (aget main-wrb-hg# (+ i j)))
                                    (== 1 (aget sister-zone# (+ i j)))
                                    (or (and (= :swing-point (aget sister-zone-type# (+ i j))) (<= 8 j 64))
                                        (and (= :strong-continuation (aget sister-zone-type# (+ i j))) (<= j 16)))
                                    (> (aget sister-body-size# (+ i j))
                                       (aget sister-body-size# c2))
                                    (> (aget sister-zone-confirmation-candle# (+ i j)) i)
                                    (<= (aget sister-filled-by# (+ i j)) c2)))
                           (or (and (< (aget main-close# c2)
                                       (aget main-close# (+ i j)))
                                    (< (amax (aslice main-high# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (<= (aget sister-close# c2)
                                        (aget sister-close# (+ i j))))
                               (and (< (aget main-close# (+ i j))
                                       (aget main-close# c2)
                                       (aget main-open# (+ i j)))
                                    (< (amax (aslice main-high# (+ c2 1) (+ c2 4)))
                                       (aget main-close# (+ i j)))
                                    (or (< (aget sister-close# c2)
                                           (aget sister-open# (+ i j)))
                                        (> (aget sister-close# c2)
                                           (aget sister-close# (+ i j)))))
                               (and (> (aget sister-close# c2)
                                       (aget sister-close# (+ i j)))
                                    (> (amin (aslice sister-low# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (>= (aget main-close# c2)
                                        (aget main-close# (+ i j))))
                               (and (> (aget sister-close# (+ i j))
                                       (aget sister-close# c2)
                                       (aget sister-open# (+ i j)))
                                    (> (amin (aslice sister-low# (+ c2 1) (+ c2 4)))
                                       (aget sister-close# (+ i j)))
                                    (or (> (aget main-close# c2)
                                           (aget main-open# (+ i j)))
                                        (< (aget main-close# c2)
                                           (aget main-close# (+ i j)))))))
                    (do (aset main-vtr# i (dec (aget main-vtr# i)))
                        (aset main-vtr-zone-nr# i (+ i j))
                        (aset zone-used-by# (+ i j) i)
                        (aset main-vtr-sister-name# i sister-name)))
                  (recur (inc j))))))
          (recur (dec i))))
      (assoc main-data :vtr-h2# main-vtr#
                       :vtr-h2-zone-nr# main-vtr-zone-nr#
                       :vtr-h2-sister-name# main-vtr-sister-name#))))

